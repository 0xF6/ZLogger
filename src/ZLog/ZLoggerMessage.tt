<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    static string CreateTypeArgument(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
    }

    static string CreateParameters(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x + " arg" + x));
    }
    

    static string CreateParameterNames(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "arg" + x));
    }
#>
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Text;

namespace ZLog
{
    // TODO:use ZLog.Prepare

    public static class ZLoggerMessage
    {
        public static Action<ILogger, Exception> Define(LogLevel logLevel, EventId eventId, string message)
        {
            return (ILogger logger, Exception ex) =>
            {
                logger.ZLogMessage(logLevel, eventId, ex, message);
            };
        }

<# for(var i = 1; i <= 14; i++) { #>
        public static Action<ILogger, <#= CreateTypeArgument(i) #>, Exception> Define<<#= CreateTypeArgument(i) #>>(LogLevel logLevel, EventId eventId, string format)
        {
            return (ILogger logger, <#= CreateParameters(i) #>, Exception ex) =>
            {
                logger.ZLog<<#= CreateTypeArgument(i) #>>(logLevel, eventId, ex, format, <#= CreateParameterNames(i) #>);
            };
        }

<# } #>

<# for(var i = 1; i <= 13; i++) { #>
        public static Action<ILogger, TPayload, <#= CreateTypeArgument(i) #>, Exception> DefineWithPayload<TPayload, <#= CreateTypeArgument(i) #>>(LogLevel logLevel, EventId eventId, string format)
        {
            return (ILogger logger, TPayload payload, <#= CreateParameters(i) #>, Exception ex) =>
            {
                logger.ZLog<TPayload, <#= CreateTypeArgument(i) #>>(logLevel, eventId, ex, payload, format, <#= CreateParameterNames(i) #>);
            };
        }

<# } #>
    }
}
