using ZLogger.Formatters;

namespace ZLogger
{
    public class ZLoggerOptions
    {
        Func<IZLoggerFormatter> formatterFactory = DefaultFormatterFactory;

        /// <summary>
        /// `InternalErrorLogger` is a delegate that is called when an exception occurs in the log writing process (such as a serialization error). The default value is `null`, which means errors are ignored.
        /// </summary>
        public Action<Exception>? InternalErrorLogger { get; set; }

        /// <summary>
        /// Enable `ILogger.BeginScope`, default is `false`.
        /// </summary>
        public bool IncludeScopes { get; set; }

        /// <summary>
        /// Gets or sets the time provider for the logger. The Timestamp of LogInfo is generated by TimeProvider's GetUtcNow() and LocalTimeZone when TimeProvider is set. The default value is null, which means use the system standard.
        /// </summary>
        public TimeProvider? TimeProvider { get; set; }

        /// <summary>
        /// Create an formatter to use in ZLoggerProvider.
        /// </summary>
        public IZLoggerFormatter CreateFormatter() => formatterFactory.Invoke();

        public ZLoggerOptions UseFormatter(Func<IZLoggerFormatter> formatterFactory)
        {
            this.formatterFactory = formatterFactory;
            return this;
        }

        public ZLoggerOptions UsePlainTextFormatter(Action<PlainTextZLoggerFormatter>? configure = null)
        {
            UseFormatter(() =>
            {
                var formatter = new PlainTextZLoggerFormatter();
                configure?.Invoke(formatter);
                return formatter;
            });
            return this;
        }

        static IZLoggerFormatter DefaultFormatterFactory()
        {
            return new PlainTextZLoggerFormatter();
        }
    }
}
