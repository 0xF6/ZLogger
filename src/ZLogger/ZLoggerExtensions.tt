<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var logLevels = new[] { "Trace", "Debug", "Information", "Warning", "Error", "Critical" };
#>
using System;
using Microsoft.Extensions.Logging;

namespace ZLogger
{
    public static partial class ZLoggerExtensions
    {
        public static void ZLog(this ILogger logger, LogLevel logLevel, ref ZLoggerInterpolatedStringHandler message)
        {
            ZLog(logger, logLevel, default, null, ref message);
        }
        
        public static void ZLog(this ILogger logger, LogLevel logLevel, EventId eventId, ref ZLoggerInterpolatedStringHandler message)
        {
            ZLog(logger, logLevel, eventId, null, ref message);
        }
        
        public static void ZLog(this ILogger logger, LogLevel logLevel, Exception? exception, ref ZLoggerInterpolatedStringHandler message)
        {
            ZLog(logger, logLevel, default, exception, ref message);
        }
        
        public static void ZLog(this ILogger logger, LogLevel logLevel, EventId eventId, Exception? exception, ref ZLoggerInterpolatedStringHandler message)
        {
            logger.Log(logLevel, eventId, message.GetState(), exception, (state, ex) => state.ToString());
        }
<# foreach(var logLevel in logLevels) { #>

        public static void ZLog<#= logLevel #>(this ILogger logger, ref ZLoggerInterpolatedStringHandler message)
        {
            ZLog(logger, LogLevel.<#= logLevel #>, default, null, ref message);
        } 

        public static void ZLog<#= logLevel #>(this ILogger logger, EventId eventId, ref ZLoggerInterpolatedStringHandler message)
        {
            ZLog(logger, LogLevel.<#= logLevel #>, eventId, null, ref message);
        } 

        public static void ZLog<#= logLevel #>(this ILogger logger, Exception? exception, ref ZLoggerInterpolatedStringHandler message)
        {
            ZLog(logger, LogLevel.<#= logLevel #>, default, exception, ref message);
        } 

        public static void ZLog<#= logLevel #>(this ILogger logger, EventId eventId, Exception? exception, ref ZLoggerInterpolatedStringHandler message)
        {
            ZLog(logger, LogLevel.<#= logLevel #>, eventId, exception, ref message);
        }
<# } #>
    }
}
